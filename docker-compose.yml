version: '3.8'

services:

  nginx:
    build: ./services/nginx
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth
      - feed
      - notification
      - frontend
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  frontend:
    build: ./services/resourse
    restart: unless-stopped
    networks:
      - backend
    expose:
      - 3000
    volumes:
      - ./frontend/public/:/usr/src/app/public
      - ./frontend/src/:/usr/src/app/src
    command: npm run start
    depends_on:
      - auth
      - feed
      - notification
    
  auth:
    build: ./services/user
    restart: unless-stopped
    networks:
      - backend
    # command: gunicorn --bind 0.0.0.0:5020 manage:app # gunicorn
    command: python manage.py run -h 0.0.0.0 -p 5020 --debug # flask
    volumes:
      - ./backend/:/usr/src/app/application
    expose:
      - 5020
    environment:
      - DB_PORT=3307
    env_file:
      - ./services/user/.env.dev
    depends_on:
      - db
  
  feed:
    build: ./services/feed
    restart: unless-stopped
    networks:
      - backend
    # command: gunicorn --bind 0.0.0.0:5010 manage:app # gunicorn
    # command: bash -c "celery -A manage:celery worker --loglevel=info & python manage.py run -h 0.0.0.0 -p 5010 --debug" # flask
    command: python manage.py run -h 0.0.0.0 -p 5010 --debug # flask
    volumes:
      - ./backend/:/usr/src/app/application
    expose:
      - 5010
    environment:
      - DB_PORT=3307
    env_file:
      - ./services/feed/.env.dev
    depends_on:
      - db
      - auth
  
  notification:
    build: ./services/notification
    # command: gunicorn --bind 0.0.0.0:5030 --worker-class eventlet -w 1 manage:app # gunicorn
    restart: unless-stopped
    networks:
      - backend
    command: python manage.py # flask_socketio
    volumes:
      - ./backend/:/usr/src/app/application
    expose:
      - 5030
    env_file:
      - ./services/notification/.env.dev
    depends_on:
      - auth
      - redis
  
  celery-worker:
    build: ./services/celery
    restart: unless-stopped
    command: celery -A manage:app worker --loglevel=info
    networks:
      - backend
    volumes:
      - ./backend/:/usr/src/app/application
    env_file:
      - ./services/celery/.env.dev
    depends_on:
      redis:
        condition: service_healthy
      notification:
        condition: service_started
  
  redis:
    image: redis:latest
    restart: unless-stopped
    networks:
      - backend
    expose:
      - 6379
    volumes:
      - ./cachedata:/root/redis
      # - ./services/redis/redis.conf:/usr/local/etc/redis/redis.conf
    # command: --requirepass $${REDIS_PASSWORD}
    env_file:
      - ./services/redis/.env.dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 10
      interval: 5s
  
  db:
    image: mysql:8
    restart: unless-stopped
    networks:
      - backend
    expose:
      - 3307
    ports:
      - 3308:3307
    environment:
      - MYSQL_TCP_PORT=3307
    env_file:
      - ./services/mysql/.env.dev
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
      interval: 5s
    volumes:
      - ./dbdata:/var/lib/mysql/

networks:
  backend:
    name: backend
